#!/usr/bin/env bash

# set pipefail so that if any command in a pipe fails, the pipe as a whole fails
set -o pipefail

DEBUG=0                  # Set to 1 to enable debug messages
LOG=0                    # Set to 1 to enable log messages
BACKUP_ON_EXIT=0         # Set to 1 to backup all diaries on exit
CHECK_IF_FZF_INSTALLED=1 # Set to 1 to check if fzf is installed

# The diary directory
DIARY_DIR="${HOME}/.diary"

# Ansi escape colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
CLEAR='\033[0m'

# Error, success, info, debug and warning messages
error() { # Error messages
	if [[ ${LOG} -eq 1 ]]; then
		echo -e "[${RED}ERROR${CLEAR}] ${1}"
	fi
}

success() { # Success messages
	if [[ ${LOG} -eq 1 ]]; then
		echo -e "[${GREEN}SUCCESS${CLEAR}] ${1}"
	fi
}

info() { # Info messages
	if [[ ${LOG} -eq 1 ]]; then
		echo -e "[${CYAN}INFO${CLEAR}] ${1}"
	fi
}

debug() { # Debug messages
	if [[ ${DEBUG} -eq 1 ]]; then
		echo -e "[${BLUE}DEBUG${CLEAR}] ${1}"
	fi
}

warn() { # Warning messages
	if [[ ${LOG} -eq 1 ]]; then
		echo -e "[${YELLOW}WARNING${CLEAR}] ${1}"
	fi
}

# Trap ctrl-c and call ctrl_c()
ctrl_c() {
	echo -e "\CLEARaught ${GREEN}CTRL-C${CLEAR}, aborting..." # Exit with code 0 gracefully if the user presses ctrl-c
	exit 1
}

backup_on_exit() {
	if [[ ${BACKUP_ON_EXIT} == 1 ]]; then # Check if the user wants to backup all diaries on exit
		backup_everything "-y"               # Backup all diaries with the -y flag to skip the confirmation
	fi
	exit 0
}

trap ctrl_c INT
trap 'backup_on_exit' EXIT

# Preliminary checks

# Check if fzf is installed
FZF_INSTALLED=$(command -v fzf)

# Check if there is a default diary
if [[ ${CHECK_IF_FZF_INSTALLED} -eq 1 ]]; then
	if [[ -z ${FZF_INSTALLED} ]]; then
		echo -e "[${GREEN}MESSAGE${CLEAR}] fzf not installed, you can install it with your package manager for a better experience"
	fi
fi

if ! cat "${DIARY_DIR}/.default_diary" >/dev/null 2>&1; then
	info "No default diary set"
else
	DEFAULT_DIARY=$(cat "${DIARY_DIR}/.default_diary") # Set the default diary to the diary in the .default_diary file
fi

# Check if diary directory exists
if [[ ! -d ${DIARY_DIR} ]]; then
	warn "Diary directory not found, creating one"
	mkdir -p "${DIARY_DIR}"
	info "Created diary directory at \"${DIARY_DIR}\""
fi

# General functions for all diary functions

# Ask the user a yes or no question and return the answer
choice() {
	echo -e -n "${BLUE}${1} (y/n)${CLEAR}: " >&2
	read -r CHOICE
	echo "${CHOICE}"
}

# Find the rc file by checking the shell, currently only supports bash and zsh
find_rc() {
	if [[ ${SHELL} == *"bash" ]]; then
		debug "Found bash shell" >&2
		echo "${HOME}/.bashrc"
	elif [[ ${SHELL} == *"zsh" ]]; then
		debug "Found zsh shell" >&2
		echo "${HOME}/.zshrc"
	else
		error "No rc file found" >&2
		exit 1
	fi
}

# Replace or append the editor change to the default shell rc file
replace_or_append_editor() {
	local file
	file=$(find_rc)
	local line="export EDITOR"
	local replacement="export EDITOR=\"${EDITOR}\""

	if grep -Fxq "${line}" "${file}"; then # Check if the line exists in the file
		# The line exists in the file, replace it.
		info "found line \"${line}\" in \"${file}\""
		debug "Replacing line \"${line}\" with \"${replacement}\" in \"${file}\""
		sed -i "s/^${line}$/${replacement}/" "${file}" # Replace the line
	else
		# The line does not exist in the file, append it.
		echo "${replacement}" >>"${file}" # Append the line
	fi
}

# Select entry from list using fzf or select

select_in_list() {
	local new_list
	# trunk-ignore(shellcheck/SC2206)
	local list=(${@:1:$#-1}) # Get all but the last argument
	local prompt="${*: -1}"  # Get the last argument
	# trunk-ignore(shellcheck/SC2206)
	new_list=(${list[@]} "Quit") # Add "New" and "Quit" to the list

	if [[ -n ${FZF_INSTALLED} ]]; then
		debug "fzf installed, using fzf" >&2                                                             # If fzf is installed, use fzf
		RESULT=$(printf "%s\n" "${new_list[@]}" | fzf --layout=reverse --no-sort --prompt="${prompt}: ") # Use fzf to select a diary
	else
		debug "fzf not installed, using select" >&2 # If fzf is not installed, use select
		PS3="${prompt}: "
		select opt in "${new_list[@]}"; do
			if [[ ${opt} == "Quit" ]]; then # Check if the user chose to quit
				echo "You chose to quit." >&2
				RESULT="Quit"
				break
			elif [[ ${opt} == "New" ]]; then # Check if the user chose to create a new diary
				RESULT="New"
				break
			elif [[ -z ${opt} ]]; then
				echo "Invalid option. Please try again." >&2 # Check if the user chose an invalid option
			else
				echo "You chose: ${opt}" >&2 # Check if the user chose a diary
				RESULT=${opt}
				break
      fi
		done
	fi
	debug "Selected \"${RESULT}\"" >&2
	echo "${RESULT}"
}

# Diary functions

# Select a diary from the diary directory

select_diary() {
	local NEW_LIST
	FIND_RESULT=$(find "${DIARY_DIR}" -maxdepth 1 -type d -printf "%f\n" | grep -v "^$(basename "${DIARY_DIR}")$") # Find all diaries
	readarray -t DIARY_LIST <<<"${FIND_RESULT}"
	# trunk-ignore(shellcheck/SC2001)
	# trunk-ignore(shellcheck/SC2250)
	NEW_LIST=$(for i in "${DIARY_LIST[@]}"; do echo "$i" | sed -e 's/\(.*\)\([0-9]\+\)\(.*\)/\2 \0/'; done | sort -n -k1,1 | cut -d' ' -f2-)
	if [[ $1 == "New" ]]; then
		debug 'Adding "New" to the list' >&2
		# trunk-ignore(shellcheck/SC2206)
		NEW_LIST=("${1}" ${NEW_LIST[@]}) # Add "New" to the list
	fi
	select_in_list "${NEW_LIST[*]}" "Select diary" # Select a diary
}

# Select a page from the given diary (or ask for a diary if none is given)

select_page() {
	local NEW_LIST
	FIND_PAGES=$(find "${DIARY_DIR}/${1}/pages/" -maxdepth 1 -type f -printf "%f\n" | grep -v "^$(basename "pages/")$") # Find all pages
	readarray -t PAGE_LIST <<<"${FIND_PAGES}"                                                                           # Put all pages in an array
	# trunk-ignore(shellcheck/SC2250)
	# trunk-ignore(shellcheck/SC2001)
	NEW_LIST=$(for i in "${PAGE_LIST[@]}"; do echo "$i" | sed -e 's/\(.*\)\([0-9]\+\)\(.*\)/\2 \0/'; done | sort -n -k1,1 | cut -d' ' -f2-)
	if [[ $2 == "New" ]]; then
		# trunk-ignore(shellcheck/SC2206)
		NEW_LIST=("${2}" ${NEW_LIST[@]}) # Add "New" to the list
	fi
	select_in_list "${NEW_LIST[*]}" "Select page" # Select a page
}

# Rename the given diary (or ask for a diary if none is given)

rename_diary() {
	local DIARY_TO_RENAME
	local NEW_DIARY_NAME
	if [[ -z $2 ]]; then           # check if a diary name was given
		if [[ $1 == "rename" ]]; then # check if the function was called from another function
			warn "No diary name given from any other function"
			DIARY_TO_RENAME=$(select_diary)
			info "Selected diary \"${DIARY_TO_RENAME}\""
		else
			DIARY_TO_RENAME=$1
		fi
	else
		DIARY_TO_RENAME=$2
	fi
	if [[ ${DIARY_TO_RENAME} == "Quit" ]]; then # check if the user chose to quit
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		echo -e -n "${BLUE}Enter new diary name${CLEAR}: " # Ask the user for a new diary name
		read -r NEW_DIARY_NAME
		local NEW_DIARY="${DIARY_DIR}/${NEW_DIARY_NAME}" # The new diary directory
		if [[ -d ${NEW_DIARY} ]]; then                   # Check if the diary already exists
			error "Diary already exists at \"${NEW_DIARY}\", please choose a different name"
			exit 1
		else
			mv "${DIARY_DIR}/${DIARY_TO_RENAME}" "${DIARY_DIR}/${NEW_DIARY_NAME}" # Rename the diary
			success "Renamed diary \"${DIARY_TO_RENAME}\" to \"${NEW_DIARY_NAME}\""
		fi
	fi
}

# Create a new diary with the given name (or ask for a name if none is given) but smaller with less checks

new_diary_small() {
	echo -e -n "${BLUE}Enter diary name${CLEAR}: " >&2 # Ask the user for a diary name
	read -r DIARY_NAME
	local NEW_DIARY="${DIARY_DIR}/${DIARY_NAME}"
	if [[ -d ${NEW_DIARY} ]]; then # Check if the diary already exists
		error "Diary already exists at \"${NEW_DIARY}\", please choose a different name" >&2
		echo "Quit"
	else
		mkdir -p "${NEW_DIARY}/pages"                      # Create the pages directory
		echo -e "# page1\n" >"${NEW_DIARY}/pages/page1.md" # Create the first page and add a title
		debug "Created page \"${NEW_DIARY}/pages/page1.md\"" >&2
		success "Created diary \"${DIARY_NAME}\"" >&2
	fi
}

# Create a new diary with the given name (or ask for a name if none is given)

new_diary() {
	if [[ -z $2 ]]; then # Check if a diary name was given
		warn "No diary name given"
		echo -e -n "${BLUE}Enter diary name${CLEAR}: "
		read -r DIARY_NAME
	else
		DIARY_NAME=$2
	fi

	local NEW_DIARY="${DIARY_DIR}/${DIARY_NAME}" # The new diary directory
	local DECISION
	if [[ -d ${NEW_DIARY} ]]; then # Check if the diary already exists
		error "Diary already exists at \"${NEW_DIARY}\", please choose a different name"
		exit 1
	else
		mkdir -p "${NEW_DIARY}/pages"                      # Create the pages directory
		echo -e "# page1\n" >"${NEW_DIARY}/pages/page1.md" # Create the first page and add a title
		debug "Created page \"${NEW_DIARY}/pages/page1.md\""
		success "Created diary \"${DIARY_NAME}\""
		DECISION=$(choice "Do you want to edit the diary now?") # Ask the user if they want to edit the diary
		if [[ ${DECISION} == "y" ]]; then
			edit_diary "${DIARY_NAME}" # Edit the diary
		fi
	fi
}

# Set the default diary to the given diary (or ask for a diary if none is given)

default_diary() {
	local NEW_DEFAULT_DIARY
	local DEFAULT_DIARY_DECISION
	local FINAL_DEFAULT_DIARY_DECISION

	if [[ -n ${DEFAULT_DIARY} ]]; then # Check if a default diary is set
		echo "Default diary is set to \"${DEFAULT_DIARY}\""
		DEFAULT_DIARY_DECISION=$(choice "Do you want to change the default diary?") # Ask the user if they want to change the default diary
		if [[ ${DEFAULT_DIARY_DECISION} == "n" ]]; then
			debug 'Exiting with code 0, selected "cancel"'
			exit 0
		fi
	fi

	if [[ -z $2 ]]; then            # Check if a diary name was given
		if [[ $1 == "default" ]]; then # Check if the function was called from another function
			NEW_DEFAULT_DIARY=$(select_diary "New")
			if [[ ${NEW_DEFAULT_DIARY} == "Quit" ]]; then
				info "Cancelled, exiting..."
				debug 'Exiting with code 0, selected "cancel"'
				exit 0
			fi
		else
			NEW_DEFAULT_DIARY=$1
		fi
	else
		NEW_DEFAULT_DIARY=$2
	fi

	FINAL_DEFAULT_DIARY_DECISION=$(choice "Are you sure you want to set the default diary to \"${NEW_DEFAULT_DIARY}\"?") # Ask the user if they are sure they want to set the default diary
	if [[ ${FINAL_DEFAULT_DIARY_DECISION} == "n" ]]; then
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		echo "${NEW_DEFAULT_DIARY}" >"${DIARY_DIR}/.default_diary" # Set the default diary
		success "Set default diary to \"${NEW_DEFAULT_DIARY}\""
	fi

}

# List all diaries and allow the user to choose which to rename, edit, delete and make default

list_diaries() {
	local NEW_DIARY_STATUS
	if [[ -z ${2} ]]; then        # Check if a diary name was given
		RESULT=$(select_diary "New") # Select a diary
		if [[ ${RESULT} == "New" ]]; then
			NEW_DIARY_STATUS=$(new_diary_small) # Create a new diary
		fi
	fi

	if [[ ${NEW_DIARY_STATUS} == "Quit" ]]; then # Check if the user chose to quit
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	fi

	if [[ ${RESULT} == "Quit" ]]; then # Check if the user chose to quit
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		info "Selected diary \"${RESULT}\""
		local ACTIONS=("Edit" "Rename" "Make default" "Delete" "cancel")                              # The actions to choose from
		if [[ -n ${FZF_INSTALLED} ]]; then                                                            # If fzf is installed, use fzf
			ACTION=$(printf "%s\n" "${ACTIONS[@]}" | fzf --layout=reverse --prompt="Select an action: ") # Use fzf to select an action
			case ${ACTION} in                                                                            # Check which action was selected and call the appropriate function
			"Edit")
				debug 'Selected "edit"'
				edit_diary "${RESULT}"
				;;
			"Make default")
				debug 'Selected "make default"'
				default_diary "${RESULT}"
				;;
			"Rename")
				debug 'Selected "rename"'
				rename_diary "${RESULT}"
				;;
			"Delete")
				debug 'Selected "delete"'
				delete_diary "${RESULT}"
				;;
			"cancel")
				info "Cancelled, exiting..."
				debug 'Exiting with code 0, selected "cancel"'
				exit 0
				;;
			*)
				error "Invalid action \"${ACTION}\""
				exit 1
				;;
			esac
		else # If fzf is not installed, use select
			PS3="Select an action: "
			select opt in "${ACTIONS[@]}"; do # Use select to select an action
				case ${opt} in                   # Check which action was selected and call the appropriate function
				"Edit")
					debug 'Selected "edit"'
					edit_diary "${RESULT}"
					;;
				"Make default")
					debug 'Selected "make default"'
					default_diary "${RESULT}"
					;;
				"Rename")
					debug 'Selected "rename"'
					rename_diary "${RESULT}"
					;;
				"Delete")
					debug 'Selected "delete"'
					delete_diary "${RESULT}"
					;;
				"cancel")
					info "Cancelled, exiting..."
					debug 'Exiting with code 0, selected "cancel"'
					exit 0
					;;
				*)
					error "Invalid action \"${opt}\""
					exit 1
					;;
				esac
			done
		fi
	fi
}

# Edit the given diary (or ask for a diary if none is given)

edit_diary() {
	local EDITOR_CHOICE          # The user's choice of editor
	if [[ -z $2 ]]; then         # Check if a diary name was given
		if [[ $1 == "edit" ]]; then # Check if the function was called from another function
			warn "No diary name given from any other function, checking for default diary"
			if [[ -z ${DEFAULT_DIARY} ]]; then # Check if a default diary is set
				warn "No default diary set, select a diary"
				DIARY_NAME=$(select_diary "New")
			else
				DIARY_NAME=${DEFAULT_DIARY}
			fi
		else
			DIARY_NAME=$1
		fi
	else
		DIARY_NAME=$2
	fi
	if [[ ${DIARY_NAME} == "New" ]]; then # Check if the user chose to create a new diary
		local NEW_DIARY_STATUS
		NEW_DIARY_STATUS=$(new_diary_small)          # Create a new diary
		if [[ ${NEW_DIARY_STATUS} == "Quit" ]]; then # Check if the user chose to quit
			info "Cancelled, exiting..."
			debug 'Exiting with code 0, selected "cancel"'
			exit 0
		fi
	fi
	debug "Using diary \"${DIARY_NAME}\""
	if [[ ${DIARY_NAME} == "Quit" ]]; then # Check if the user chose to quit
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	elif [[ -z ${EDITOR} ]]; then # Check if an editor is set
		warn "No editor set"
		EDITOR_CHOICE=$(choice "Do you want to set an editor now?, if not, the default editor will be vim")
		if [[ ${EDITOR_CHOICE} == "y" ]]; then # Check if the user wants to set an editor
			echo -e -n "${BLUE}Enter editor${CLEAR}: "
			read -r EDITOR
		else
			EDITOR="vim" # else Set the default editor to vim
		fi
		replace_or_append_editor
	fi
	debug "Using editor \"${EDITOR}\""
	while true; do                                                                                                                # Loop until the user chooses to quit
		FIND_PAGES=$(find "${DIARY_DIR}/${DIARY_NAME}/pages/" -maxdepth 1 -type f -printf "%f\n" | grep -v "^$(basename "pages/")$") # Find all pages
		readarray -t PAGE_LIST <<<"${FIND_PAGES}"                                                                                    # Put all pages in an array
		PAGE=$(select_page "${DIARY_NAME}" "New")                                                                                    # Select a page
		if [[ ${PAGE} == "Quit" ]]; then                                                                                             # Check if the user chose to quit
			info "Cancelled, exiting..."
			debug 'Exiting with code 0, selected "Quit"'
			exit 0
		elif [[ ${PAGE} == "New" ]]; then # Check if the user chose to create a new page
			info "Creating new page"
			echo "# page$((${#PAGE_LIST[@]} + 1))" >"${DIARY_DIR}/${DIARY_NAME}/pages/page$((${#PAGE_LIST[@]} + 1)).md" # Create a new page with the correct name and add a title
			PAGE="${DIARY_DIR}/${DIARY_NAME}/pages/page$((${#PAGE_LIST[@]} + 1)).md"                                    # Set the page to the new page
		else
			PAGE="${DIARY_DIR}/${DIARY_NAME}/pages/${PAGE}" # Set the page to the selected page
		fi
		info "Editing page \"${PAGE}\"":
		${EDITOR} "${PAGE}" # Edit the page
	done
}

# Delete the given diary (or ask for a diary if none is given)

delete_diary() {
	local DIARY_TO_DELETE
	if [[ -z $2 ]]; then           # check if a diary name was given
		if [[ $1 == "delete" ]]; then # check if the function was called from another function
			warn "No diary name given from any other function"
			DIARY_TO_DELETE=$(select_diary)
			info "Selected diary \"${DIARY_TO_DELETE}\""
		else
			DIARY_TO_DELETE=$1
		fi
	else
		DIARY_TO_DELETE=$2
	fi
	if [[ ${DIARY_TO_DELETE} == "Quit" ]]; then # check if the user chose to quit
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		local DELETE_DECISION
		DELETE_DECISION=$(choice "Are you sure you want to delete \"${DIARY_TO_DELETE}\"?") # Ask the user if they are sure they want to delete the diary
		if [[ ${DELETE_DECISION} == "y" ]]; then
			rm -rf "${DIARY_DIR:?}/${DIARY_TO_DELETE}" # Delete the diary
			success "Deleted diary \"${DIARY_TO_DELETE}\""
		else
			info "Cancelled, exiting..."
			debug 'Exiting with code 0, selected "cancel"'
			exit 0
		fi
	fi
}

# Clean up the diary directory

clean_diaries() {

	# The questions to ask the user, i know this is a bit silly but i like it
	local QUESTIONS=(
		"Are you sure you want to clean up the diary directory?"
		"Are you sure you want to delete everything?"
		"Are you really sure you want to delete absolutely everything??"
		"Are you really really sure you want to delete absolutely everything???"
		"Are you really really really sure you want to delete absolutely everything????"
		"Are you really really really really sure you want to delete absolutely everything?????"
	)

	for question in "${QUESTIONS[@]}"; do    # Loop through all questions
		CLEAN_DECISION=$(choice "${question}")  # Ask the user if they are sure they want to clean up the diary directory
		if [[ ${CLEAN_DECISION} != "y" ]]; then # Check if the user chose to cancel
			info "Cancelled, exiting..."
			debug 'Exiting with code 0, selected "cancel"'
			exit 0
		fi
	done

	rm -rf "${DIARY_DIR}"   # Delete the diary directory
	mkdir -p "${DIARY_DIR}" # Create the diary directory again
	success "Cleaned up diary directory"
}

# Backs up the given diary (or asks for a diary if none is given)

backup_diary() {
	mkdir -p "${HOME}/backups"     # Create the backups directory
	local DIARY_TO_BACKUP          # The diary to backup
	if [[ -z $2 ]]; then           # check if a diary name was given
		if [[ $1 == "backup" ]]; then # check if the function was called from another function
			warn "No diary name given from any other function"
			DIARY_TO_BACKUP=$(select_diary)
			info "Selected diary \"${DIARY_TO_BACKUP}\""
		else
			DIARY_TO_BACKUP=$1
		fi
	else
		DIARY_TO_BACKUP=$2
	fi
	if [[ ${DIARY_TO_BACKUP} == "Quit" ]]; then # check if the user chose to quit
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		local BACKUP_DECISION
		local DATE
		local TIME
		DATE=$(date +%d-%m-%Y)                                                              # Get the date
		TIME=$(date +%H:%M:%S)                                                              # Get the time
		BACKUP_DECISION=$(choice "Are you sure you want to backup \"${DIARY_TO_BACKUP}\"?") # Ask the user if they are sure they want to backup the diary
		if [[ ${BACKUP_DECISION} == "y" ]]; then
			tar -czvf "${HOME}/backups/${DIARY_TO_BACKUP} - ${TIME}, ${DATE}.tar.gz" "${DIARY_DIR}/${DIARY_TO_BACKUP}" # Backup the diary
			success "Backed up diary \"${DIARY_TO_BACKUP}\""
		else
			info "Cancelled, exiting..."
			debug 'Exiting with code 0, selected "cancel"'
			exit 0
		fi
	fi
}

# Backs up everything in the diary directory

backup_everything() {
	mkdir -p "${HOME}/backups" # Create the backups directory
	local BACKUP_DECISION
	local DATE
	local TIME
	DATE=$(date +%d-%m-%Y) # Get the date
	TIME=$(date +%H:%M:%S) # Get the time
	for arg in "${@}"; do
		if [[ ${arg} == *"-y"* ]]; then
			BACKUP_DECISION="y" # If the user passed the -y flag, set the backup decision to yes
		else
			BACKUP_DECISION=$(choice "Are you sure you want to backup everything?") # Else ask the user if they are sure they want to backup everything
		fi
	done
	if [[ ${BACKUP_DECISION} == "y" ]]; then
		FIND_RESULT=$(find "${DIARY_DIR}" -maxdepth 1 -type d -printf "%f\n" | grep -v "^$(basename "${DIARY_DIR}")$") # Find all diaries
		readarray -t DIARY_LIST <<<"${FIND_RESULT}"                                                                    # Put all diaries in an array
		for diary in "${DIARY_LIST[@]}"; do                                                                            # Loop through all diaries
			tar -czvf "${HOME}/backups/${diary} - ${TIME}, ${DATE}.tar.gz" "${DIARY_DIR}/${diary}" >/dev/null 2>&1        # Backup the diary
		done
		success "Backed up everything"
	else
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	fi
}

# All the help messages (is quite messy because of escape sequences and such)

write_help() {
	echo -e "Usage: $0 [OPTION] [DIARY] \n"

	echo -e "Options:"
	echo -e "${RED}new, n, --new, -n,${CLEAR} \t\t |"
	echo -e "${RED}create, cr, --create, -cr,${CLEAR} \t |"
	echo -e "${RED}add, a, --add, -a,${CLEAR} \t\t | \t${CYAN}Creates a new diary with the given name${CLEAR}"
	echo -e "${RED}make, m, --make, -m,${CLEAR} \t\t |"
	echo -e "${RED}-yes${CLEAR} \t\t\t\t |"

	echo -e "\t\t\t\t |"

	echo -e "${RED}default, d, --default, -d${CLEAR} \t | \t${CYAN}Sets the default diary${CLEAR}"
	echo -e "\t\t\t\t |"

	echo -e "${RED}list, ls, --list, -ls,${CLEAR} \t\t | \t${CYAN}Lists all diaries and allows you to choose${CLEAR}"
	echo -e "${RED}view, v, --view, -v${CLEAR} \t\t | \t${CYAN}which to rename, edit, delete and make default${CLEAR}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}edit, e, --edit, -e${CLEAR} \t\t | \t${CYAN}Edits the given diary/selected diary (${GREEN}or the default diary if none is given${CYAN})${CLEAR}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}rename, rn, --rename, -rn${CLEAR} \t | \t${CYAN}Renames the given diary/selected diary (${GREEN}or the default diary if none is given${CYAN})${CLEAR}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}delete, del, --delete, -del,${CLEAR} \t |"
	echo -e "${RED}rm, remove, -rm, --remove,${CLEAR} \t | \t${CYAN}Deletes the given diary/selected diary (${GREEN}or the default diary if none is given${CYAN})${CLEAR}"
	echo -e "${RED}-no${CLEAR} \t\t\t\t |"

	echo -e "\t\t\t\t |"

	echo -e "${RED}clean, cl, --clean, -cl${CLEAR} \t | \t${CYAN}Cleans up the diary directory${CLEAR}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}backup, b, --backup, -b${CLEAR} \t | \t${CYAN}Backs up the given diary/selected diary (${GREEN}or the default diary if none is given${CYAN})${CLEAR}"
	echo -e "${RED}-all${CLEAR} \t\t\t\t | \t${CYAN}Backs up everything${CLEAR}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}help, h, --help, -h, *${CLEAR} \t\t | \t${CYAN}Shows this help message${CLEAR} \n"
}

# Check for the first argument and call the appropriate function

case $1 in
"new" | "n" | "--new" | "-n" | "create" | "cr" | "--create" | "-cr" | "add" | "a" | "--add" | "-a" | "make" | "m" | "--make" | "-m" | "-yes")
	new_diary "${@}"
	;;
"default" | "d" | "--default" | "-d")
	default_diary "${@}"
	;;
"list" | "ls" | "--list" | "-ls" | "view" | "v" | "--view" | "-v")
	list_diaries "${@}"
	;;
"edit" | "e" | "--edit" | "-e")
	edit_diary "${@}"
	;;
"rename" | "rn" | "--rename" | "-rn")
	rename_diary "${@}"
	;;
"delete" | "del" | "rm" | "remove" | "--delete" | "-del" | "-rm" | "--remove" | "-no")
	delete_diary "${@}"
	;;
"clean" | "cl" | "--clean" | "-cl")
	clean_diaries "${@}"
	;;
"backup" | "b" | "--backup" | "-b")
	if [[ $2 == "-all" ]]; then
		backup_everything "${@}"
	else
		backup_diary "${@}"
	fi
	;;
"help" | "h" | "--help" | "-h" | *)
	write_help
	;;
esac
