#!/usr/bin/env bash

# set pipefail so that if any command in a pipe fails, the pipe as a whole fails
set -o pipefail

DEBUG=1          # Set to 1 to enable debug messages
LOG=1            # Set to 1 to enable log messages
BACKUP_ON_EXIT=0 # Set to 1 to backup all diaries on exit

# The diary directory
DIARY_DIR="${HOME}/.diary"

# Ansi escape colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Error, success, info, debug and warning messages
error() {
	if ! [[ -v ${LOG} ]]; then
		return
	fi
	echo -e "[${RED}ERROR${NC}] ${1}"
}

success() {
	if ! [[ -v ${LOG} ]]; then
		return
	fi
	echo -e "[${GREEN}SUCCESS${NC}] ${1}"
}

info() {
	if ! [[ -v ${LOG} ]]; then
		return
	fi
	echo -e "[${CYAN}INFO${NC}] ${1}"
}

debug() {
	if ! [[ -v ${DEBUG} ]]; then
		return
	fi
	echo -e "[${BLUE}DEBUG${NC}] ${1}"
}

warn() {
	if ! [[ -v ${LOG} ]]; then
		return
	fi
	echo -e "[${YELLOW}WARNING${NC}] ${1}"
}

# Trap ctrl-c and call ctrl_c()
ctrl_c() {
	echo -e "\nCaught ${GREEN}CTRL-C${NC}, aborting..."
	exit 1
}

backup_on_exit() {
	if [[ ${BACKUP_ON_EXIT} == 1 ]]; then
		backup_everything "-y"
	fi
	exit 0
}

trap ctrl_c INT
trap 'backup_on_exit' EXIT

# Preliminary checks

# Check if fzf is installed
FZF_INSTALLED=$(command -v fzf)

# Check if there is a default diary
if ! cat "${DIARY_DIR}/.default_diary" >/dev/null 2>&1; then
	info "No default diary set"
else
	DEFAULT_DIARY=$(cat "${DIARY_DIR}/.default_diary")
fi

# Check if diary directory exists
if [[ ! -d ${DIARY_DIR} ]]; then
	warn "Diary directory not found, creating one"
	info "Created diary directory at \"${DIARY_DIR}\""
	mkdir -p "${DIARY_DIR}"
fi

# General functions for all diary functions

# Ask the user a yes or no question and return the answer
choice() {
	echo -e -n "${BLUE}${1} (y/n)${NC}: " >&2
	read -r CHOICE
	echo "${CHOICE}"
}

# Find the rc file
find_rc() {
	if [[ ${SHELL} == *"bash" ]]; then
		echo "${HOME}/.bashrc"
	elif [[ ${SHELL} == *"zsh" ]]; then
		echo "${HOME}/.zshrc"
	else
		error "No rc file found" >&2
		exit 1
	fi
}

# Replace or append the editor change to the default shell rc file
replace_or_append_editor() {
	local file
	file=$(find_rc)
	local line="export EDITOR"
	local replacement="export EDITOR=\"${EDITOR}\""

	if grep -Fxq "${line}" "${file}"; then
		# The line exists in the file, replace it.
		sed -i "s/^${line}$/${replacement}/" "${file}"
	else
		# The line does not exist in the file, append it.
		echo "${replacement}" >>"${file}"
	fi
}

rename_diary() {
	local DIARY_TO_RENAME
	local NEW_DIARY_NAME
	if [[ -z $2 ]]; then
		if [[ $1 == "rename" ]]; then
			warn "No diary name given from any other function"
			DIARY_TO_RENAME=$(select_diary)
			info "Selected diary \"${DIARY_TO_RENAME}\""
		else
			DIARY_TO_RENAME=$1
		fi
	else
		DIARY_TO_RENAME=$2
	fi
	if [[ ${DIARY_TO_RENAME} == "Quit" ]]; then
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		echo -e -n "${BLUE}Enter new diary name${NC}: "
		read -r NEW_DIARY_NAME
		local NEW_DIARY="${DIARY_DIR}/${NEW_DIARY_NAME}"
		if [[ -d ${NEW_DIARY} ]]; then
			error "Diary already exists at \"${NEW_DIARY}\", please choose a different name"
			exit 1
		else
			mv "${DIARY_DIR}/${DIARY_TO_RENAME}" "${DIARY_DIR}/${NEW_DIARY_NAME}"
			success "Renamed diary \"${DIARY_TO_RENAME}\" to \"${NEW_DIARY_NAME}\""
		fi
	fi
}

select_in_list() {
	local new_input_list
	local new_list
	local list=(${@:1:$#-1})
	local prompt="${*: -1}"

	new_input_list=($(for i in "${list[@]}"; do echo "$i" | sed -e 's/\(.*\)\([0-9]\+\)\(.*\)/\2 \0/'; done | sort -n -k1,1 | cut -d' ' -f2-))
	new_list=("New" ${new_input_list[@]} "Quit")

	if [[ -n ${FZF_INSTALLED} ]]; then
		debug "fzf installed, using fzf" >&2
		RESULT=$(printf "%s\n" "${new_list[@]}" | fzf --layout=reverse --no-sort --prompt="${prompt}: ") # Use fzf to select a diary
	else
		debug "fzf not installed, using select" >&2
		PS3="${prompt}: "
		select opt in "${list[@]}"; do
			if [[ ${opt} == "Quit" ]]; then
				echo "You chose to quit." >&2
				RESULT="Quit"
				exit 0
			elif [[ ${opt} == "New" ]]; then
				RESULT="New"
				break
			elif [[ -z ${opt} ]]; then
				echo "Invalid option. Please try again." >&2
			else
				echo "You chose: ${opt}" >&2
				RESULT=${opt}
				break
			fi
		done
	fi
	echo "${RESULT}"
}

# Diary functions

# Create a new diary with the given name (or ask for a name if none is given)

select_diary() {
	FIND_RESULT=$(find "${DIARY_DIR}" -maxdepth 1 -type d -printf "%f\n" | grep -v "^$(basename "${DIARY_DIR}")$")
	readarray -t DIARY_LIST <<<"${FIND_RESULT}"
	select_in_list "${DIARY_LIST[*]}" "Select diary"
}

select_page() {
	FIND_PAGES=$(find "${DIARY_DIR}/${1}/pages/" -maxdepth 1 -type f -printf "%f\n" | grep -v "^$(basename "pages/")$")
	readarray -t PAGE_LIST <<<"${FIND_PAGES}"
	select_in_list "${PAGE_LIST[*]}" "Select page"
}

new_diary_small() {
	echo -e -n "${BLUE}Enter diary name${NC}: " >&2
	read -r DIARY_NAME
	local NEW_DIARY="${DIARY_DIR}/${DIARY_NAME}"
	if [[ -d ${NEW_DIARY} ]]; then
		error "Diary already exists at \"${NEW_DIARY}\", please choose a different name" >&2
		echo "Quit"
	else
		mkdir -p "${NEW_DIARY}/pages"                      # Create the pages directory
		echo -e "# page1\n" >"${NEW_DIARY}/pages/page1.md" # Create the first page and add a title
		debug "Created page \"${NEW_DIARY}/pages/page1.md\"" >&2
		success "Created diary \"${DIARY_NAME}\"" >&2
	fi
}

new_diary() {
	if [[ -z $2 ]]; then
		warn "No diary name given"
		echo -e -n "${BLUE}Enter diary name${NC}: "
		read -r DIARY_NAME
	else
		DIARY_NAME=$2
	fi

	local NEW_DIARY="${DIARY_DIR}/${DIARY_NAME}"
	local DECISION
	if [[ -d ${NEW_DIARY} ]]; then
		error "Diary already exists at \"${NEW_DIARY}\", please choose a different name"
		exit 1
	else
		mkdir -p "${NEW_DIARY}/pages"                      # Create the pages directory
		echo -e "# page1\n" >"${NEW_DIARY}/pages/page1.md" # Create the first page and add a title
		debug "Created page \"${NEW_DIARY}/pages/page1.md\""
		success "Created diary \"${DIARY_NAME}\""
		DECISION=$(choice "Do you want to edit the diary now?")
		if [[ ${DECISION} == "y" ]]; then
			edit_diary "${DIARY_NAME}"
		fi
	fi
}

default_diary() {
	local NEW_DEFAULT_DIARY
	local DEFAULT_DIARY_DECISION
	local FINAL_DEFAULT_DIARY_DECISION

	if [[ -n ${DEFAULT_DIARY} ]]; then
		echo "Default diary is set to \"${DEFAULT_DIARY}\""
		DEFAULT_DIARY_DECISION=$(choice "Do you want to change the default diary?")
		if [[ ${DEFAULT_DIARY_DECISION} == "n" ]]; then
			debug 'Exiting with code 0, selected "cancel"'
			exit 0
		fi
	fi

	if [[ -z $2 ]]; then
		if [[ $1 == "default" ]]; then
			NEW_DEFAULT_DIARY=$(select_diary)
			if [[ ${NEW_DEFAULT_DIARY} == "Quit" ]]; then
				info "Cancelled, exiting..."
				debug 'Exiting with code 0, selected "cancel"'
				exit 0
			fi
		else
			NEW_DEFAULT_DIARY=$1
		fi
	else
		NEW_DEFAULT_DIARY=$2
	fi

	FINAL_DEFAULT_DIARY_DECISION=$(choice "Are you sure you want to set the default diary to \"${NEW_DEFAULT_DIARY}\"?")
	if [[ ${FINAL_DEFAULT_DIARY_DECISION} == "n" ]]; then
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		echo "${NEW_DEFAULT_DIARY}" >"${DIARY_DIR}/.default_diary"
		success "Set default diary to \"${NEW_DEFAULT_DIARY}\""
	fi

}

list_diaries() {
	local NEW_DIARY_STATUS
	if [[ -z ${2} ]]; then
		RESULT=$(select_diary)
		if [[ ${RESULT} == "New" ]]; then
			NEW_DIARY_STATUS=$(new_diary_small)
		fi
	fi

	if [[ ${NEW_DIARY_STATUS} == "Quit" ]]; then
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	fi

	if [[ ${RESULT} == "Quit" ]]; then
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		info "Selected diary \"${RESULT}\""
		local ACTIONS=("Edit" "Rename" "Make default" "Delete" "Cancel")
		if [[ -n ${FZF_INSTALLED} ]]; then
			ACTION=$(printf "%s\n" "${ACTIONS[@]}" | fzf --layout=reverse --prompt="Select an action: ")
			case ${ACTION} in
			"Edit")
				debug 'Selected "edit"'
				edit_diary "${RESULT}"
				;;
			"Make default")
				debug 'Selected "make default"'
				default_diary "${RESULT}"
				;;
			"Rename")
				debug 'Selected "rename"'
				rename_diary "${RESULT}"
				;;
			"Delete")
				debug 'Selected "delete"'
				delete_diary "${RESULT}"
				;;
			"Cancel")
				info "Cancelled, exiting..."
				debug 'Exiting with code 0, selected "cancel"'
				exit 0
				;;
			*)
				error "Invalid action \"${ACTION}\""
				exit 1
				;;
			esac
		else # If fzf is not installed, use select
			PS3="Select an action: "
			select opt in "${ACTIONS[@]}"; do
				case ${opt} in
				"Edit")
					debug 'Selected "edit"'
					edit_diary "${RESULT}"
					;;
				"Make default")
					debug 'Selected "make default"'
					default_diary "${RESULT}"
					;;
				"Rename")
					debug 'Selected "rename"'
					rename_diary "${RESULT}"
					;;
				"Delete")
					debug 'Selected "delete"'
					delete_diary "${RESULT}"
					;;
				"Cancel")
					info "Cancelled, exiting..."
					debug 'Exiting with code 0, selected "cancel"'
					exit 0
					;;
				*)
					error "Invalid action \"${opt}\""
					exit 1
					;;
				esac
			done
		fi
	fi
}

edit_diary() {
	local EDITOR_CHOICE  # The user's choice of editor
	if [[ -z $2 ]]; then # Check if a diary name was given
		if [[ $1 == "edit" ]]; then
			warn "No diary name given from any other function, checking for default diary"
			if [[ -z ${DEFAULT_DIARY} ]]; then
				warn "No default diary set, select a diary"
				DIARY_NAME=$(select_diary)
				if [[ ${DIARY_NAME} == "New" ]]; then
					local NEW_DIARY_STATUS
					NEW_DIARY_STATUS=$(new_diary_small)
					if [[ ${NEW_DIARY_STATUS} == "Quit" ]]; then
						info "Cancelled, exiting..."
						debug 'Exiting with code 0, selected "cancel"'
						exit 0
					fi
				fi
			else
				DIARY_NAME=${DEFAULT_DIARY}
			fi
		else
			DIARY_NAME=$1
		fi
	else
		DIARY_NAME=$2
	fi
	debug "Using diary \"${DIARY_NAME}\""
	if [[ ${DIARY_NAME} == "Quit" ]]; then
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	elif [[ -z ${EDITOR} ]]; then # Check if an editor is set
		warn "No editor set"
		EDITOR_CHOICE=$(choice "Do you want to set an editor now?, if not, the default editor will be nano")
		if [[ ${EDITOR_CHOICE} == "y" ]]; then
			echo -e -n "${BLUE}Enter editor${NC}: "
			read -r EDITOR
		else
			EDITOR="vim"
		fi
		replace_or_append_editor
	fi
	debug "Using editor \"${EDITOR}\""
	while true; do
		FIND_PAGES=$(find "${DIARY_DIR}/${DIARY_NAME}/pages/" -maxdepth 1 -type f -printf "%f\n" | grep -v "^$(basename "pages/")$")
		readarray -t PAGE_LIST <<<"${FIND_PAGES}"
		PAGE=$(select_page "${DIARY_NAME}")
		if [[ ${PAGE} == "Quit" ]]; then
			info "Cancelled, exiting..."
			debug 'Exiting with code 0, selected "Quit"'
			exit 0
		elif [[ ${PAGE} == "New" ]]; then
			info "Creating new page"
			echo "# page$((${#PAGE_LIST[@]} + 1))" >"${DIARY_DIR}/${DIARY_NAME}/pages/page$((${#PAGE_LIST[@]} + 1)).md"
			PAGE="${DIARY_DIR}/${DIARY_NAME}/pages/page$((${#PAGE_LIST[@]} + 1)).md"
		else
			PAGE="${DIARY_DIR}/${DIARY_NAME}/pages/${PAGE}"
		fi
		info "Editing page \"${PAGE}\""
		${EDITOR} "${PAGE}"
	done
}

delete_diary() {
	local DIARY_TO_DELETE
	if [[ -z $2 ]]; then
		if [[ $1 == "delete" ]]; then
			warn "No diary name given from any other function"
			DIARY_TO_DELETE=$(select_diary)
			info "Selected diary \"${DIARY_TO_DELETE}\""
		else
			DIARY_TO_DELETE=$1
		fi
	else
		DIARY_TO_DELETE=$2
	fi
	if [[ ${DIARY_TO_DELETE} == "Quit" ]]; then
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		local DELETE_DECISION
		DELETE_DECISION=$(choice "Are you sure you want to delete \"${DIARY_TO_DELETE}\"?")
		if [[ ${DELETE_DECISION} == "y" ]]; then
			rm -rf "${DIARY_DIR:?}/${DIARY_TO_DELETE}"
			success "Deleted diary \"${DIARY_TO_DELETE}\""
		else
			info "Cancelled, exiting..."
			debug 'Exiting with code 0, selected "cancel"'
			exit 0
		fi
	fi
}

clean_diaries() {
	local QUESTIONS=(
		"Are you sure you want to clean up the diary directory?"
		"Are you sure you want to delete everything?"
		"Are you really sure you want to delete absolutely everything??"
		"Are you really really sure you want to delete absolutely everything???"
		"Are you really really really sure you want to delete absolutely everything????"
		"Are you really really really really sure you want to delete absolutely everything?????"
	)

	for question in "${QUESTIONS[@]}"; do
		CLEAN_DECISION=$(choice "${question}")
		if [[ ${CLEAN_DECISION} != "y" ]]; then
			info "Cancelled, exiting..."
			debug 'Exiting with code 0, selected "cancel"'
			exit 0
		fi
	done

	rm -rf "${DIARY_DIR}"
	mkdir -p "${DIARY_DIR}"
	success "Cleaned up diary directory"
}

# Backs up the given diary (or asks for a diary if none is given)

backup_diary() {
	mkdir -p "${HOME}/backups" # Create the backups directory
	local DIARY_TO_BACKUP      # The diary to backup
	if [[ -z $2 ]]; then       # check if a diary name was given
		if [[ $1 == "backup" ]]; then
			warn "No diary name given from any other function"
			DIARY_TO_BACKUP=$(select_diary)
			info "Selected diary \"${DIARY_TO_BACKUP}\""
		fi
	else
		DIARY_TO_BACKUP=$2
	fi
	if [[ ${DIARY_TO_BACKUP} == "Quit" ]]; then # check if the user chose to quit
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	else
		local BACKUP_DECISION
		local DATE
		local TIME
		DATE=$(date +%d-%m-%Y)                                                              # Get the date
		TIME=$(date +%H:%M:%S)                                                              # Get the time
		BACKUP_DECISION=$(choice "Are you sure you want to backup \"${DIARY_TO_BACKUP}\"?") # Ask the user if they are sure they want to backup the diary
		if [[ ${BACKUP_DECISION} == "y" ]]; then
			tar -czvf "${HOME}/backups/${DIARY_TO_BACKUP} - ${TIME}, ${DATE}.tar.gz" "${DIARY_DIR}/${DIARY_TO_BACKUP}" # Backup the diary
			success "Backed up diary \"${DIARY_TO_BACKUP}\""
		else
			info "Cancelled, exiting..."
			debug 'Exiting with code 0, selected "cancel"'
			exit 0
		fi
	fi
}

# Backs up everything in the diary directory

backup_everything() {
	mkdir -p "${HOME}/backups" # Create the backups directory
	local BACKUP_DECISION
	local DATE
	local TIME
	DATE=$(date +%d-%m-%Y) # Get the date
	TIME=$(date +%H:%M:%S) # Get the time
	for arg in "${@}"; do
		if [[ ${arg} == *"-y"* ]]; then
			BACKUP_DECISION="y"
		else
			BACKUP_DECISION=$(choice "Are you sure you want to backup everything?")
		fi
	done
	if [[ ${BACKUP_DECISION} == "y" ]]; then
		FIND_RESULT=$(find "${DIARY_DIR}" -maxdepth 1 -type d -printf "%f\n" | grep -v "^$(basename "${DIARY_DIR}")$")
		readarray -t DIARY_LIST <<<"${FIND_RESULT}"
		for diary in "${DIARY_LIST[@]}"; do                                                                     # Loop through all diaries
			tar -czvf "${HOME}/backups/${diary} - ${TIME}, ${DATE}.tar.gz" "${DIARY_DIR}/${diary}" >/dev/null 2>&1 # Backup the diary
		done
		success "Backed up everything"
	else
		info "Cancelled, exiting..."
		debug 'Exiting with code 0, selected "cancel"'
		exit 0
	fi
}

# All the help messages (is quite messy because of escape sequences and such)

write_help() {
	echo -e "Usage: $0 [OPTION] [DIARY] \n"

	echo -e "Options:"
	echo -e "${RED}new, n, --new, -n,${NC} \t\t |"
	echo -e "${RED}create, cr, --create, -cr,${NC} \t |"
	echo -e "${RED}add, a, --add, -a,${NC} \t\t | \t${CYAN}Creates a new diary with the given name${NC}"
	echo -e "${RED}make, m, --make, -m,${NC} \t\t |"
	echo -e "${RED}-yes${NC} \t\t\t\t |"

	echo -e "\t\t\t\t |"

	echo -e "${RED}default, d, --default, -d${NC} \t | \t${CYAN}Sets the default diary${NC}"
	echo -e "\t\t\t\t |"

	echo -e "${RED}list, ls, --list, -ls,${NC} \t\t | \t${CYAN}Lists all diaries and allows you to choose${NC}"
	echo -e "${RED}view, v, --view, -v${NC} \t\t | \t${CYAN}which to rename, edit, delete and make default${NC}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}edit, e, --edit, -e${NC} \t\t | \t${CYAN}Edits the given diary/selected diary (${GREEN}or the default diary if none is given${CYAN})${NC}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}rename, rn, --rename, -rn${NC} \t | \t${CYAN}Renames the given diary/selected diary (${GREEN}or the default diary if none is given${CYAN})${NC}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}delete, del, --delete, -del,${NC} \t |"
	echo -e "${RED}rm, remove, -rm, --remove,${NC} \t | \t${CYAN}Deletes the given diary/selected diary (${GREEN}or the default diary if none is given${CYAN})${NC}"
	echo -e "${RED}-no${NC} \t\t\t\t |"

	echo -e "\t\t\t\t |"

	echo -e "${RED}clean, cl, --clean, -cl${NC} \t | \t${CYAN}Cleans up the diary directory${NC}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}backup, b, --backup, -b${NC} \t | \t${CYAN}Backs up the given diary/selected diary (${GREEN}or the default diary if none is given${CYAN})${NC}"
	echo -e "${RED}-all${NC} \t\t\t\t | \t${CYAN}Backs up everything${NC}"

	echo -e "\t\t\t\t |"

	echo -e "${RED}help, h, --help, -h, *${NC} \t\t | \t${CYAN}Shows this help message${NC} \n"
}

case $1 in
"new" | "n" | "--new" | "-n" | "create" | "cr" | "--create" | "-cr" | "add" | "a" | "--add" | "-a" | "make" | "m" | "--make" | "-m" | "-yes")
	new_diary "${@}"
	;;
"default" | "d" | "--default" | "-d")
	default_diary "${@}"
	;;
"list" | "ls" | "--list" | "-ls" | "view" | "v" | "--view" | "-v")
	list_diaries "${@}"
	;;
"edit" | "e" | "--edit" | "-e")
	edit_diary "${@}"
	;;
"rename" | "rn" | "--rename" | "-rn")
	rename_diary "${@}"
	;;
"delete" | "del" | "rm" | "remove" | "--delete" | "-del" | "-rm" | "--remove" | "-no")
	delete_diary "${@}"
	;;
"clean" | "cl" | "--clean" | "-cl")
	clean_diaries "${@}"
	;;
"backup" | "b" | "--backup" | "-b")
	if [[ $2 == "-all" ]]; then
		backup_everything "${@}"
	else
		backup_diary "${@}"
	fi
	;;
"help" | "h" | "--help" | "-h" | *)
	write_help
	;;
esac
